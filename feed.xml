<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://borkorajkovic.com//</id><title>Borko Rajkovic Tech Blog</title><subtitle>Simple blog about software development.</subtitle> <updated>2025-05-06T14:46:52+02:00</updated> <author> <name>Borko Rajković</name> <uri>https://borkorajkovic.com//</uri> </author><link rel="self" type="application/atom+xml" href="https://borkorajkovic.com//feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://borkorajkovic.com//"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2025 Borko Rajković </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Building Linux From Scratch: A Journey into the Heart of Linux</title><link href="https://borkorajkovic.com//posts/building-linux-from-scratch/" rel="alternate" type="text/html" title="Building Linux From Scratch: A Journey into the Heart of Linux" /><published>2025-05-06T10:05:00+02:00</published> <updated>2025-05-06T10:05:00+02:00</updated> <id>https://borkorajkovic.com//posts/building-linux-from-scratch/</id> <content src="https://borkorajkovic.com//posts/building-linux-from-scratch/" /> <author> <name>borko</name> </author> <category term="linux" /> <summary> Introduction After over a decade of using Linux, primarily Ubuntu, I felt it was time to delve deeper into the system’s internals. My goal was to understand how Linux operates beneath the surface, beyond the convenience of package managers and pre-configured environments. This curiosity led me to embark on the Linux From Scratch (LFS) project, a challenging yet rewarding experience that offe... </summary> </entry> <entry><title>Scout Rule</title><link href="https://borkorajkovic.com//posts/scout-rule/" rel="alternate" type="text/html" title="Scout Rule" /><published>2024-07-28T00:05:00+02:00</published> <updated>2024-07-28T00:05:00+02:00</updated> <id>https://borkorajkovic.com//posts/scout-rule/</id> <content src="https://borkorajkovic.com//posts/scout-rule/" /> <author> <name>borko</name> </author> <category term="best-practices" /> <summary> The “Scout Rule” is derived from the Boy Scouts’ motto: “Leave the campground cleaner than you found it.” In the context of software development, it emphasizes the idea of leaving the codebase better than it was before you worked on it. “Always leave the campground cleaner than you found it” (boyscout rule) The same can be applied to many other fields, I will refer to software develo... </summary> </entry> <entry><title>Echoing Variables in Linux with newlines</title><link href="https://borkorajkovic.com//posts/echoing-variables-in-linux-with-newlines/" rel="alternate" type="text/html" title="Echoing Variables in Linux with newlines" /><published>2024-07-20T15:22:00+02:00</published> <updated>2024-07-20T15:22:00+02:00</updated> <id>https://borkorajkovic.com//posts/echoing-variables-in-linux-with-newlines/</id> <content src="https://borkorajkovic.com//posts/echoing-variables-in-linux-with-newlines/" /> <author> <name>borko</name> </author> <category term="bash" /> <summary> In Linux, a common pattern is to pipe data from one program to the other using pipe operator |. Sometimes your script grows large and then you save intermediary results to variables to better handle processing logic. Depending on the terminal you use, it can happen that once you echo a variable it loses empty lines: var="line1 line2 line3 " echo $var # line1 line2 line3 Quick Answer Jus... </summary> </entry> <entry><title>The Millennium Bug's Little Brother: Y2038</title><link href="https://borkorajkovic.com//posts/the-millennium-bug-s-little-brother-y2038/" rel="alternate" type="text/html" title="The Millennium Bug's Little Brother: Y2038" /><published>2024-07-14T21:06:00+02:00</published> <updated>2024-07-14T21:06:00+02:00</updated> <id>https://borkorajkovic.com//posts/the-millennium-bug-s-little-brother-y2038/</id> <content src="https://borkorajkovic.com//posts/the-millennium-bug-s-little-brother-y2038/" /> <author> <name>borko</name> </author> <category term="bugs" /> <summary> Remember the year 2000? If you were around, you might recall the sheer panic that gripped the world as we approached the end of 1999. People stocked up on canned beans and bottled water like they were preparing for a zombie apocalypse. Why? Because of a little thing called the Y2K bug. Y2K: When Computers Feared the Millennium Bug The Y2K bug was essentially the tech world’s version of forg... </summary> </entry> <entry><title>Typing systems explained</title><link href="https://borkorajkovic.com//posts/typing-systems-explained/" rel="alternate" type="text/html" title="Typing systems explained" /><published>2024-07-02T20:45:00+02:00</published> <updated>2024-07-02T20:45:00+02:00</updated> <id>https://borkorajkovic.com//posts/typing-systems-explained/</id> <content src="https://borkorajkovic.com//posts/typing-systems-explained/" /> <author> <name>borko</name> </author> <category term="javascript" /> <category term="typescript" /> <category term="java" /> <category term="go" /> <summary> In the realm of programming languages and type systems, understanding how types are enforced and interpreted is crucial for writing robust and maintainable code. Three common approaches to type checking are Duck Typing, Structural Typing, and Nominal Typing. Each has its own philosophy and use cases, influencing how programmers design and interact with code. This article explores these three ty... </summary> </entry> </feed>
